{"ast":null,"code":"var _jsxFileName = \"/home/basit/Documents/Tutorials/GraphQL/odyssey-lift-off-part1/client/src/pages/tracks.tsx\",\n    _s = $RefreshSig$();\n\nimport { gql, useQuery } from \"@apollo/client\";\nimport React from \"react\";\nimport { Layout, QueryResult } from \"../components\";\nimport TrackCard from \"../containers/track-card\";\n/** TRACKS gql query to retreive all tracks */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TRACKS = gql`\n  query getTracks {\n    tracksForHome {\n      id\n      title\n      thumbnail\n      length\n      modulesCount\n      author {\n        name\n        photo\n      }\n    }\n  }\n`;\n\n/**\n * Tracks Page is the Catstronauts home page.\n * We display a grid of tracks fetched with useQuery with the TRACKS query\n */\nconst Tracks = _props => {\n  _s();\n\n  var _data$tracksForHome;\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(TRACKS);\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    grid: undefined,\n    fullWidth: false,\n    children: /*#__PURE__*/_jsxDEV(QueryResult, {\n      error: error,\n      loading: loading,\n      data: data,\n      children: data === null || data === void 0 ? void 0 : (_data$tracksForHome = data.tracksForHome) === null || _data$tracksForHome === void 0 ? void 0 : _data$tracksForHome.map((track, index) => /*#__PURE__*/_jsxDEV(TrackCard, {\n        track: track\n      }, track.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Tracks, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});\n\n_c = Tracks;\nexport default Tracks;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tracks\");","map":{"version":3,"sources":["/home/basit/Documents/Tutorials/GraphQL/odyssey-lift-off-part1/client/src/pages/tracks.tsx"],"names":["gql","useQuery","React","Layout","QueryResult","TrackCard","TRACKS","Tracks","_props","loading","error","data","undefined","tracksForHome","map","track","index","id"],"mappings":";;;AAAA,SAASA,GAAT,EAAcC,QAAd,QAA8B,gBAA9B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,WAAjB,QAAoC,eAApC;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AAEA;;;AACA,OAAO,MAAMC,MAAM,GAAGN,GAAI;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAdO;;AAoBP;AACA;AACA;AACA;AACA,MAAMO,MAAM,GAAIC,MAAD,IAAkC;AAAA;;AAAA;;AAC/C,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BV,QAAQ,CAACK,MAAD,CAAzC;AAEA,sBACE,QAAC,MAAD;AAAQ,IAAA,IAAI,EAAEM,SAAd;AAAyB,IAAA,SAAS,EAAE,KAApC;AAAA,2BACE,QAAC,WAAD;AAAa,MAAA,KAAK,EAAEF,KAApB;AAA2B,MAAA,OAAO,EAAED,OAApC;AAA6C,MAAA,IAAI,EAAEE,IAAnD;AAAA,gBACGA,IADH,aACGA,IADH,8CACGA,IAAI,CAAEE,aADT,wDACG,oBAAqBC,GAArB,CAAyB,CAACC,KAAD,EAAaC,KAAb,kBACxB,QAAC,SAAD;AAA0B,QAAA,KAAK,EAAED;AAAjC,SAAgBA,KAAK,CAACE,EAAtB;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CAZD;;GAAMV,M;UAC6BN,Q;;;KAD7BM,M;AAcN,eAAeA,MAAf","sourcesContent":["import { gql, useQuery } from \"@apollo/client\";\nimport React from \"react\";\nimport { Layout, QueryResult } from \"../components\";\nimport TrackCard from \"../containers/track-card\";\n\n/** TRACKS gql query to retreive all tracks */\nexport const TRACKS = gql`\n  query getTracks {\n    tracksForHome {\n      id\n      title\n      thumbnail\n      length\n      modulesCount\n      author {\n        name\n        photo\n      }\n    }\n  }\n`;\n\ninterface TracksComponentProps {\n  path: string;\n}\n\n/**\n * Tracks Page is the Catstronauts home page.\n * We display a grid of tracks fetched with useQuery with the TRACKS query\n */\nconst Tracks = (_props: TracksComponentProps) => {\n  const { loading, error, data } = useQuery(TRACKS);\n\n  return (\n    <Layout grid={undefined} fullWidth={false}>\n      <QueryResult error={error} loading={loading} data={data}>\n        {data?.tracksForHome?.map((track: any, index: number) => (\n          <TrackCard key={track.id} track={track} />\n        ))}\n      </QueryResult>\n    </Layout>\n  );\n};\n\nexport default Tracks;\n"]},"metadata":{},"sourceType":"module"}